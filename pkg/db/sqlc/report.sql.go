// Code generated by sqlc. DO NOT EDIT.
// source: report.sql

package db

import (
	"context"
	"time"
)

const createReport = `-- name: CreateReport :one
INSERT INTO report (
  trading_date,
  stock_id,
  currency_id,
  first_price,
  last_price,
  min_price,
  max_price,
  avg_price,
  total_amount,
  volume
  ) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, trading_date, stock_id, currency_id, first_price, last_price, min_price, max_price, avg_price, total_amount, volume
`

type CreateReportParams struct {
	TradingDate time.Time `json:"trading_date"`
	StockID     int64     `json:"stock_id"`
	CurrencyID  int64     `json:"currency_id"`
	FirstPrice  string    `json:"first_price"`
	LastPrice   string    `json:"last_price"`
	MinPrice    string    `json:"min_price"`
	MaxPrice    string    `json:"max_price"`
	AvgPrice    string    `json:"avg_price"`
	TotalAmount string    `json:"total_amount"`
	Volume      string    `json:"volume"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.TradingDate,
		arg.StockID,
		arg.CurrencyID,
		arg.FirstPrice,
		arg.LastPrice,
		arg.MinPrice,
		arg.MaxPrice,
		arg.AvgPrice,
		arg.TotalAmount,
		arg.Volume,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.TradingDate,
		&i.StockID,
		&i.CurrencyID,
		&i.FirstPrice,
		&i.LastPrice,
		&i.MinPrice,
		&i.MaxPrice,
		&i.AvgPrice,
		&i.TotalAmount,
		&i.Volume,
	)
	return i, err
}

const getReport = `-- name: GetReport :one
SELECT id, trading_date, stock_id, currency_id, first_price, last_price, min_price, max_price, avg_price, total_amount, volume FROM report
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetReport(ctx context.Context, id int64) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.TradingDate,
		&i.StockID,
		&i.CurrencyID,
		&i.FirstPrice,
		&i.LastPrice,
		&i.MinPrice,
		&i.MaxPrice,
		&i.AvgPrice,
		&i.TotalAmount,
		&i.Volume,
	)
	return i, err
}
