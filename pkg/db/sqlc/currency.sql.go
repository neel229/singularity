// Code generated by sqlc. DO NOT EDIT.
// source: currency.sql

package db

import (
	"context"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currency (
  code, 
  name,
  is_base
) VALUES (
  $1, $2, $3
)
RETURNING id, code, name, is_base
`

type CreateCurrencyParams struct {
	Code   string `json:"code"`
	Name   string `json:"name"`
	IsBase bool   `json:"is_base"`
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error) {
	row := q.db.QueryRowContext(ctx, createCurrency, arg.Code, arg.Name, arg.IsBase)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsBase,
	)
	return i, err
}

const deleteCurrency = `-- name: DeleteCurrency :exec
DELETE FROM currency
WHERE id = $1
`

func (q *Queries) DeleteCurrency(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCurrency, id)
	return err
}

const getCurrency = `-- name: GetCurrency :one
SELECT id, code, name, is_base FROM currency
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCurrency(ctx context.Context, id int32) (Currency, error) {
	row := q.db.QueryRowContext(ctx, getCurrency, id)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.IsBase,
	)
	return i, err
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT id, code, name, is_base FROM currency
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCurrenciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCurrencies(ctx context.Context, arg ListCurrenciesParams) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.IsBase,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrency = `-- name: UpdateCurrency :exec
UPDATE currency
SET is_base = $2
WHERE id = $1
`

type UpdateCurrencyParams struct {
	ID     int32 `json:"id"`
	IsBase bool  `json:"is_base"`
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrency, arg.ID, arg.IsBase)
	return err
}
