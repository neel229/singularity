// Code generated by sqlc. DO NOT EDIT.
// source: creator_portfolio.sql

package db

import (
	"context"
)

const createCreatorPortfolio = `-- name: CreateCreatorPortfolio :one
INSERT INTO creator_portfolio (creator_id, stock_id, quantity)
VALUES ($1, $2, $3)
RETURNING id, creator_id, stock_id, quantity
`

type CreateCreatorPortfolioParams struct {
	CreatorID int64  `json:"creator_id"`
	StockID   int64  `json:"stock_id"`
	Quantity  string `json:"quantity"`
}

func (q *Queries) CreateCreatorPortfolio(ctx context.Context, arg CreateCreatorPortfolioParams) (CreatorPortfolio, error) {
	row := q.db.QueryRowContext(ctx, createCreatorPortfolio, arg.CreatorID, arg.StockID, arg.Quantity)
	var i CreatorPortfolio
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.StockID,
		&i.Quantity,
	)
	return i, err
}

const deleteStockFromCreatorPortfolio = `-- name: DeleteStockFromCreatorPortfolio :exec
DELETE FROM creator_portfolio
WHERE stock_id = $2
  and creator_id = $1
`

type DeleteStockFromCreatorPortfolioParams struct {
	CreatorID int64 `json:"creator_id"`
	StockID   int64 `json:"stock_id"`
}

func (q *Queries) DeleteStockFromCreatorPortfolio(ctx context.Context, arg DeleteStockFromCreatorPortfolioParams) error {
	_, err := q.db.ExecContext(ctx, deleteStockFromCreatorPortfolio, arg.CreatorID, arg.StockID)
	return err
}

const getPortfolioByCreatorID = `-- name: GetPortfolioByCreatorID :one
SELECT id, creator_id, stock_id, quantity
FROM creator_portfolio
WHERE creator_id = $1
`

func (q *Queries) GetPortfolioByCreatorID(ctx context.Context, creatorID int64) (CreatorPortfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolioByCreatorID, creatorID)
	var i CreatorPortfolio
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.StockID,
		&i.Quantity,
	)
	return i, err
}

const updateCreatorStockQuantity = `-- name: UpdateCreatorStockQuantity :exec
UPDATE creator_portfolio
SET quantity = $3
WHERE creator_id = $1
  and stock_id = $2
`

type UpdateCreatorStockQuantityParams struct {
	CreatorID int64  `json:"creator_id"`
	StockID   int64  `json:"stock_id"`
	Quantity  string `json:"quantity"`
}

func (q *Queries) UpdateCreatorStockQuantity(ctx context.Context, arg UpdateCreatorStockQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateCreatorStockQuantity, arg.CreatorID, arg.StockID, arg.Quantity)
	return err
}
