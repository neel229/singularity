// Code generated by sqlc. DO NOT EDIT.
// source: creator.sql

package db

import (
	"context"
	"database/sql"
)

const createCreator = `-- name: CreateCreator :one
INSERT INTO creator (
    first_name,
    last_name,
    user_name,
    email,
    password,
    preferred_currency_id,
    creator_stock_id,
    virgin_tokens_left
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, first_name, last_name, user_name, password, email, time_registered, time_confirmed, preferred_currency_id, creator_stock_id, virgin_tokens_left
`

type CreateCreatorParams struct {
	FirstName           string        `json:"first_name"`
	LastName            string        `json:"last_name"`
	UserName            string        `json:"user_name"`
	Email               string        `json:"email"`
	Password            string        `json:"password"`
	PreferredCurrencyID int32         `json:"preferred_currency_id"`
	CreatorStockID      sql.NullInt64 `json:"creator_stock_id"`
	VirginTokensLeft    int32         `json:"virgin_tokens_left"`
}

func (q *Queries) CreateCreator(ctx context.Context, arg CreateCreatorParams) (Creator, error) {
	row := q.db.QueryRowContext(ctx, createCreator,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Email,
		arg.Password,
		arg.PreferredCurrencyID,
		arg.CreatorStockID,
		arg.VirginTokensLeft,
	)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Password,
		&i.Email,
		&i.TimeRegistered,
		&i.TimeConfirmed,
		&i.PreferredCurrencyID,
		&i.CreatorStockID,
		&i.VirginTokensLeft,
	)
	return i, err
}

const getCreator = `-- name: GetCreator :one
SELECT id, first_name, last_name, user_name, password, email, time_registered, time_confirmed, preferred_currency_id, creator_stock_id, virgin_tokens_left
FROM creator
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCreator(ctx context.Context, id int64) (Creator, error) {
	row := q.db.QueryRowContext(ctx, getCreator, id)
	var i Creator
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Password,
		&i.Email,
		&i.TimeRegistered,
		&i.TimeConfirmed,
		&i.PreferredCurrencyID,
		&i.CreatorStockID,
		&i.VirginTokensLeft,
	)
	return i, err
}

const getVirginTokensLeft = `-- name: GetVirginTokensLeft :one
SELECT virgin_tokens_left
FROM creator
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVirginTokensLeft(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRowContext(ctx, getVirginTokensLeft, id)
	var virgin_tokens_left int32
	err := row.Scan(&virgin_tokens_left)
	return virgin_tokens_left, err
}

const listCreators = `-- name: ListCreators :many
SELECT id, first_name, last_name, user_name, password, email, time_registered, time_confirmed, preferred_currency_id, creator_stock_id, virgin_tokens_left
FROM creator
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCreatorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCreators(ctx context.Context, arg ListCreatorsParams) ([]Creator, error) {
	rows, err := q.db.QueryContext(ctx, listCreators, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Creator
	for rows.Next() {
		var i Creator
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.UserName,
			&i.Password,
			&i.Email,
			&i.TimeRegistered,
			&i.TimeConfirmed,
			&i.PreferredCurrencyID,
			&i.CreatorStockID,
			&i.VirginTokensLeft,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCreatorEmail = `-- name: UpdateCreatorEmail :exec
UPDATE creator
SET email = $2
WHERE id = $1
`

type UpdateCreatorEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateCreatorEmail(ctx context.Context, arg UpdateCreatorEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateCreatorEmail, arg.ID, arg.Email)
	return err
}

const updateCreatorPassword = `-- name: UpdateCreatorPassword :exec
UPDATE creator
SET password = $2
WHERE id = $1
`

type UpdateCreatorPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateCreatorPassword(ctx context.Context, arg UpdateCreatorPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateCreatorPassword, arg.ID, arg.Password)
	return err
}

const updateCreatorPreferredCurrency = `-- name: UpdateCreatorPreferredCurrency :exec
UPDATE creator
SET preferred_currency_id = $2
WHERE id = $1
`

type UpdateCreatorPreferredCurrencyParams struct {
	ID                  int64 `json:"id"`
	PreferredCurrencyID int32 `json:"preferred_currency_id"`
}

func (q *Queries) UpdateCreatorPreferredCurrency(ctx context.Context, arg UpdateCreatorPreferredCurrencyParams) error {
	_, err := q.db.ExecContext(ctx, updateCreatorPreferredCurrency, arg.ID, arg.PreferredCurrencyID)
	return err
}

const updateVirginTokensLeft = `-- name: UpdateVirginTokensLeft :exec
UPDATE creator
SET virgin_tokens_left = $2
WHERE id = $1
`

type UpdateVirginTokensLeftParams struct {
	ID               int64 `json:"id"`
	VirginTokensLeft int32 `json:"virgin_tokens_left"`
}

func (q *Queries) UpdateVirginTokensLeft(ctx context.Context, arg UpdateVirginTokensLeftParams) error {
	_, err := q.db.ExecContext(ctx, updateVirginTokensLeft, arg.ID, arg.VirginTokensLeft)
	return err
}
