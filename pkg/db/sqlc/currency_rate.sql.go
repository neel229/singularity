// Code generated by sqlc. DO NOT EDIT.
// source: currency_rate.sql

package db

import (
	"context"
	"database/sql"
)

const createCurrencyRate = `-- name: CreateCurrencyRate :one
INSERT INTO currency_rate (
  currency_id,
  base_currency_id,
  rate
) VALUES (
  $1, $2, $3
)
RETURNING id, currency_id, base_currency_id, rate, ts
`

type CreateCurrencyRateParams struct {
	CurrencyID     sql.NullInt32  `json:"currency_id"`
	BaseCurrencyID sql.NullInt32  `json:"base_currency_id"`
	Rate           sql.NullString `json:"rate"`
}

func (q *Queries) CreateCurrencyRate(ctx context.Context, arg CreateCurrencyRateParams) (CurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, createCurrencyRate, arg.CurrencyID, arg.BaseCurrencyID, arg.Rate)
	var i CurrencyRate
	err := row.Scan(
		&i.ID,
		&i.CurrencyID,
		&i.BaseCurrencyID,
		&i.Rate,
		&i.Ts,
	)
	return i, err
}

const getCurrencyRate = `-- name: GetCurrencyRate :one
SELECT id, currency_id, base_currency_id, rate, ts FROM currency_rate
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCurrencyRate(ctx context.Context, id int64) (CurrencyRate, error) {
	row := q.db.QueryRowContext(ctx, getCurrencyRate, id)
	var i CurrencyRate
	err := row.Scan(
		&i.ID,
		&i.CurrencyID,
		&i.BaseCurrencyID,
		&i.Rate,
		&i.Ts,
	)
	return i, err
}

const updateCurrencyRate = `-- name: UpdateCurrencyRate :exec
UPDATE currency_rate
SET rate = $2
WHERE id = $1
`

type UpdateCurrencyRateParams struct {
	ID   int64          `json:"id"`
	Rate sql.NullString `json:"rate"`
}

func (q *Queries) UpdateCurrencyRate(ctx context.Context, arg UpdateCurrencyRateParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrencyRate, arg.ID, arg.Rate)
	return err
}
