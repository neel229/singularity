// Code generated by sqlc. DO NOT EDIT.
// source: offer.sql

package db

import (
	"context"
)

const createOffer = `-- name: CreateOffer :one
INSERT INTO offer (
  trader_id,
  stock_id,
  quantity,
  buy,
  sell,
  price
  ) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, trader_id, stock_id, quantity, buy, sell, price, ts
`

type CreateOfferParams struct {
	TraderID int64  `json:"trader_id"`
	StockID  int64  `json:"stock_id"`
	Quantity string `json:"quantity"`
	Buy      bool   `json:"buy"`
	Sell     bool   `json:"sell"`
	Price    string `json:"price"`
}

func (q *Queries) CreateOffer(ctx context.Context, arg CreateOfferParams) (Offer, error) {
	row := q.db.QueryRowContext(ctx, createOffer,
		arg.TraderID,
		arg.StockID,
		arg.Quantity,
		arg.Buy,
		arg.Sell,
		arg.Price,
	)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.StockID,
		&i.Quantity,
		&i.Buy,
		&i.Sell,
		&i.Price,
		&i.Ts,
	)
	return i, err
}

const getOffer = `-- name: GetOffer :one
SELECT id, trader_id, stock_id, quantity, buy, sell, price, ts FROM offer
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOffer(ctx context.Context, id int64) (Offer, error) {
	row := q.db.QueryRowContext(ctx, getOffer, id)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.StockID,
		&i.Quantity,
		&i.Buy,
		&i.Sell,
		&i.Price,
		&i.Ts,
	)
	return i, err
}

const listOffers = `-- name: ListOffers :many
SELECT id, trader_id, stock_id, quantity, buy, sell, price, ts FROM offer
WHERE trader_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOffersParams struct {
	TraderID int64 `json:"trader_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListOffers(ctx context.Context, arg ListOffersParams) ([]Offer, error) {
	rows, err := q.db.QueryContext(ctx, listOffers, arg.TraderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Offer
	for rows.Next() {
		var i Offer
		if err := rows.Scan(
			&i.ID,
			&i.TraderID,
			&i.StockID,
			&i.Quantity,
			&i.Buy,
			&i.Sell,
			&i.Price,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
