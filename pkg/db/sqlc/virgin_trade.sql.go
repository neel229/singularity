// Code generated by sqlc. DO NOT EDIT.
// source: virgin_trade.sql

package db

import (
	"context"
	"database/sql"
)

const createVirginTrade = `-- name: CreateVirginTrade :one
INSERT INTO virgin_trade (
  stock_id,
  creator_id,
  buyer_id,
  quantity,
  unit_price,
  details,
  virgin_offer_id
  ) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, stock_id, creator_id, buyer_id, quantity, unit_price, details, virgin_offer_id
`

type CreateVirginTradeParams struct {
	StockID       sql.NullInt64  `json:"stock_id"`
	CreatorID     sql.NullInt64  `json:"creator_id"`
	BuyerID       sql.NullInt64  `json:"buyer_id"`
	Quantity      sql.NullString `json:"quantity"`
	UnitPrice     sql.NullString `json:"unit_price"`
	Details       sql.NullString `json:"details"`
	VirginOfferID sql.NullInt64  `json:"virgin_offer_id"`
}

func (q *Queries) CreateVirginTrade(ctx context.Context, arg CreateVirginTradeParams) (VirginTrade, error) {
	row := q.db.QueryRowContext(ctx, createVirginTrade,
		arg.StockID,
		arg.CreatorID,
		arg.BuyerID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Details,
		arg.VirginOfferID,
	)
	var i VirginTrade
	err := row.Scan(
		&i.ID,
		&i.StockID,
		&i.CreatorID,
		&i.BuyerID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Details,
		&i.VirginOfferID,
	)
	return i, err
}

const getVirginTrade = `-- name: GetVirginTrade :one
SELECT id, stock_id, creator_id, buyer_id, quantity, unit_price, details, virgin_offer_id FROM virgin_trade
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVirginTrade(ctx context.Context, id int64) (VirginTrade, error) {
	row := q.db.QueryRowContext(ctx, getVirginTrade, id)
	var i VirginTrade
	err := row.Scan(
		&i.ID,
		&i.StockID,
		&i.CreatorID,
		&i.BuyerID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Details,
		&i.VirginOfferID,
	)
	return i, err
}

const listVirginTradesByCreator = `-- name: ListVirginTradesByCreator :many
SELECT id, stock_id, creator_id, buyer_id, quantity, unit_price, details, virgin_offer_id FROM virgin_trade
WHERE creator_id = $1
LIMIT $2
OFFSET $3
`

type ListVirginTradesByCreatorParams struct {
	CreatorID sql.NullInt64 `json:"creator_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListVirginTradesByCreator(ctx context.Context, arg ListVirginTradesByCreatorParams) ([]VirginTrade, error) {
	rows, err := q.db.QueryContext(ctx, listVirginTradesByCreator, arg.CreatorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VirginTrade
	for rows.Next() {
		var i VirginTrade
		if err := rows.Scan(
			&i.ID,
			&i.StockID,
			&i.CreatorID,
			&i.BuyerID,
			&i.Quantity,
			&i.UnitPrice,
			&i.Details,
			&i.VirginOfferID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVirginTradesByFan = `-- name: ListVirginTradesByFan :many
SELECT id, stock_id, creator_id, buyer_id, quantity, unit_price, details, virgin_offer_id FROM virgin_trade
WHERE buyer_id = $1
LIMIT $2
OFFSET $3
`

type ListVirginTradesByFanParams struct {
	BuyerID sql.NullInt64 `json:"buyer_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) ListVirginTradesByFan(ctx context.Context, arg ListVirginTradesByFanParams) ([]VirginTrade, error) {
	rows, err := q.db.QueryContext(ctx, listVirginTradesByFan, arg.BuyerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VirginTrade
	for rows.Next() {
		var i VirginTrade
		if err := rows.Scan(
			&i.ID,
			&i.StockID,
			&i.CreatorID,
			&i.BuyerID,
			&i.Quantity,
			&i.UnitPrice,
			&i.Details,
			&i.VirginOfferID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
