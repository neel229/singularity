// Code generated by sqlc. DO NOT EDIT.
// source: price.sql

package db

import (
	"context"
)

const createPrice = `-- name: CreatePrice :one
INSERT INTO price (
  stock_id,
  currency_id,
  buy,
  sell
  ) VALUES (
  $1, $2, $3, $4
) RETURNING id, stock_id, currency_id, buy, sell, ts
`

type CreatePriceParams struct {
	StockID    int64  `json:"stock_id"`
	CurrencyID int64  `json:"currency_id"`
	Buy        string `json:"buy"`
	Sell       string `json:"sell"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, createPrice,
		arg.StockID,
		arg.CurrencyID,
		arg.Buy,
		arg.Sell,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.StockID,
		&i.CurrencyID,
		&i.Buy,
		&i.Sell,
		&i.Ts,
	)
	return i, err
}

const deletePrice = `-- name: DeletePrice :exec
DELETE FROM price
WHERE id = $1
`

func (q *Queries) DeletePrice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePrice, id)
	return err
}

const getPrice = `-- name: GetPrice :one
SELECT id, stock_id, currency_id, buy, sell, ts FROM price
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPrice(ctx context.Context, id int64) (Price, error) {
	row := q.db.QueryRowContext(ctx, getPrice, id)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.StockID,
		&i.CurrencyID,
		&i.Buy,
		&i.Sell,
		&i.Ts,
	)
	return i, err
}

const updateBuyingPrice = `-- name: UpdateBuyingPrice :exec
UPDATE price
SET buy = $2
WHERE id = $1
`

type UpdateBuyingPriceParams struct {
	ID  int64  `json:"id"`
	Buy string `json:"buy"`
}

func (q *Queries) UpdateBuyingPrice(ctx context.Context, arg UpdateBuyingPriceParams) error {
	_, err := q.db.ExecContext(ctx, updateBuyingPrice, arg.ID, arg.Buy)
	return err
}

const updateSellingPrice = `-- name: UpdateSellingPrice :exec
UPDATE price
SET sell = $2
WHERE id = $1
`

type UpdateSellingPriceParams struct {
	ID   int64  `json:"id"`
	Sell string `json:"sell"`
}

func (q *Queries) UpdateSellingPrice(ctx context.Context, arg UpdateSellingPriceParams) error {
	_, err := q.db.ExecContext(ctx, updateSellingPrice, arg.ID, arg.Sell)
	return err
}
