// Code generated by sqlc. DO NOT EDIT.
// source: portfolio.sql

package db

import (
	"context"
)

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO portfolio (
  fan_id,
  creator_id,
  stock_id,
  quantity
  ) VALUES (
  $1, $2, $3, $4
) RETURNING id, fan_id, creator_id, stock_id, quantity
`

type CreatePortfolioParams struct {
	FanID     int64  `json:"fan_id"`
	CreatorID int64  `json:"creator_id"`
	StockID   int64  `json:"stock_id"`
	Quantity  string `json:"quantity"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, createPortfolio,
		arg.FanID,
		arg.CreatorID,
		arg.StockID,
		arg.Quantity,
	)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.FanID,
		&i.CreatorID,
		&i.StockID,
		&i.Quantity,
	)
	return i, err
}

const deleteStockFromPortfolio = `-- name: DeleteStockFromPortfolio :exec
DELETE FROM portfolio
WHERE id = $1
`

func (q *Queries) DeleteStockFromPortfolio(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStockFromPortfolio, id)
	return err
}

const getPortfolio = `-- name: GetPortfolio :one
SELECT id, fan_id, creator_id, stock_id, quantity FROM portfolio
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPortfolio(ctx context.Context, id int64) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolio, id)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.FanID,
		&i.CreatorID,
		&i.StockID,
		&i.Quantity,
	)
	return i, err
}

const updateStockQuantity = `-- name: UpdateStockQuantity :exec
UPDATE portfolio
SET quantity = $2
WHERE id = $1
`

type UpdateStockQuantityParams struct {
	ID       int64  `json:"id"`
	Quantity string `json:"quantity"`
}

func (q *Queries) UpdateStockQuantity(ctx context.Context, arg UpdateStockQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateStockQuantity, arg.ID, arg.Quantity)
	return err
}
